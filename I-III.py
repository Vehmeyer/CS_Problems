#Given two strings that include only lowercase alpha characters, str_1 and str_2, 
#write a function that returns a new sorted string that contains any character (only once) that appeared in str_1 or str_2.

def csLongestPossible(str_1, str_2):
    concatStr = str_1 + str_2
    sortedStr = "".join(sorted(set(concatStr)))
    return sortedStr

#Given a sorted array (in ascending order) of integers and a target, write a function that finds the two integers that add up to the target.

def csSortedTwoSum(numbers, target):
    d = {}
    for i, num in enumerate(numbers):
        if target - num in d:
            return (d[target - num], i)
        d[num] = i

#You are given two strings, str_1 and str_2, where str_2 is generated by randomly shuffling str_1 and then adding one letter at a random position.
#Write a function that returns the letter that was added to str_2.

def csFindAddedLetter(str_1, str_2):
    count = {}
    for char in str_2:
        if char not in count:
            count[char] = 1
        else:
            count[char] += 1
    for char in str_1:
        count[char] -= 1
        
    for k in count.keys():
        if count[k] != 0:
            return k

#Given a string, write a function that returns the index of the first unique (non-repeating) character. 
#If there isn't a unique (non-repeating) character, return -1.

def csFirstUniqueChar(input_str):
    freq = {}
    for c in input_str:
        freq[c] = input_str.count(c)
    for i, c in enumerate(input_str):
        if freq[c] ==1:
            return i
    return -1
